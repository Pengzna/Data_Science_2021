{"remainingRequest":"D:\\vueproject\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vueproject\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\vueproject\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueproject\\src\\components\\mainBody.vue?vue&type=template&id=202e058b&scoped=true&","dependencies":[{"path":"D:\\vueproject\\src\\components\\mainBody.vue","mtime":1642516262944},{"path":"D:\\vueproject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueproject\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vueproject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueproject\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}